{"version":3,"sources":["hoc/withGlobalError.jsx","util/formValidations.js","hoc/withFormField/withFormField.jsx","components/UI/FormFields/FormFields.jsx","hoc/withFormField/withFormField.module.css","hoc/withRedirectToProfile.jsx","components/MainContent/Login/Login.jsx"],"names":["mapStateToProps","state","globalError","selectApp","withGlobalError","WrappedComponent","connect","setGlobalError","_ref","props","React","createElement","Fragment","ReactModal","isOpen","onRequestClose","style","color","required","value","length","email","test","maxLength","max","concat","minLength","min","withFormField","WithFormFieldWrapper","input","meta","touched","error","fieldClass","cl","field","Object","assign","className","errorMsg","displayName","getComponentDisplayName","InputFormField","TextAreaFormField","module","exports","authorizedUserId","selectAuthorizedUserId","withRedirectToProfile","withRedirectToProfileWrapper","Redirect","to","maxLength12","minLength3","LoginForm","memo","handleSubmit","pristine","invalid","isLogging","captchaUrl","isFetchingCaptchaUrl","captcha","Preloader","key","src","alt","Field","name","validate","component","onSubmit","type","placeholder","htmlFor","disabled","reduxForm","form","LOGIN_FORM","Login","_ref2","login","formData","mapDispatchToProps","compose","withRouter","selectAuth"],"mappings":"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","file":"static/js/7.70d20b9a.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { selectApp, setGlobalError } from \"../redux/reducers/appReducer\";\nimport ReactModal from \"react-modal\";\n\nconst mapStateToProps = (state) => ({\n  globalError: selectApp(state).globalError\n})\n\nconst withGlobalError = (WrappedComponent) => {\n  const ComponentWrapper = ({globalError, setGlobalError, ...props}) => {\n    return <>\n      <ReactModal\n        isOpen={!!globalError}\n        onRequestClose={() => setGlobalError(null)}\n      >\n        <h1 style={{color: 'red'}}>{globalError}</h1>\n      </ReactModal>\n      <WrappedComponent {...props} />\n    </>\n  }\n\n  return connect(mapStateToProps, {setGlobalError})(ComponentWrapper)\n}\n\n\nexport default withGlobalError","export const required = (value) => {\n  return value?.length ? null : 'Field is required'\n}\n\nexport const requiredCheckbox = (value) => {\n  return value ? null : 'Checkbox is required'\n}\n\nexport const email = (value) => {\n  return value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Email Field is invalid' : null\n}\n\nexport const maxLength = (max) => (value) => {\n  return value.length <= max ? null : `Field has exceeded ${max} characters`\n}\n\nexport const minLength = (min) => (value) => {\n  return value.length >= min ? null : `Field should have at least ${min} characters`\n}","import React from 'react'\nimport cl from './withFormField.module.css'\nimport { getComponentDisplayName } from '../../util/helpers'\n\n\nconst withFormField = (WrappedComponent) => {\n  const WithFormFieldWrapper = ({\n    input,\n    meta: { touched, error },\n    ...props\n  }) => {\n    let fieldClass = cl.field\n    if(touched && error) {\n      fieldClass += ` ${cl.error}`\n    }\n\n    return (\n      <div>\n        <WrappedComponent className={fieldClass} {...input} {...props} />\n        {\n          touched && error && \n            (<div className={cl.errorMsg}>\n              {error}\n            </div>)\n        }\n      </div>\n    )\n  }\n  WithFormFieldWrapper.displayName = `WithFormFieldWrapper(${getComponentDisplayName(WrappedComponent)})`;\n  \n  return WithFormFieldWrapper;\n}\n\nexport default withFormField","import withFormField from \"../../../hoc/withFormField/withFormField\";\nimport React from \"react\";\n\nexport const InputFormField = withFormField((props) => <input {...props} />)\nexport const TextAreaFormField = withFormField((props) => <textarea {...props} />)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"withFormField_field__s2rEd\",\"error\":\"withFormField_error__1k8i1\",\"errorMsg\":\"withFormField_errorMsg__3Jv8t\"};","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { getComponentDisplayName } from '../util/helpers'\nimport { selectAuthorizedUserId } from '../redux/reducers/authReducer'\n\nconst mapStateToProps = (state) => ({\n  authorizedUserId: selectAuthorizedUserId(state),\n})\n\nconst withRedirectToProfile = (WrappedComponent) => {\n\n  let withRedirectToProfileWrapper = (props) => {\n    if(props.authorizedUserId) {\n      return <Redirect to=\"/profile\" />\n    }\n\n    return <WrappedComponent {...props} />\n  }\n\n  withRedirectToProfileWrapper.displayName = `withRedirectToProfileWrapper(${getComponentDisplayName(WrappedComponent)})`;\n\n  withRedirectToProfileWrapper = connect(mapStateToProps)(withRedirectToProfileWrapper)\n\n  return withRedirectToProfileWrapper\n}\n\nexport default withRedirectToProfile","import React, { memo } from 'react'\nimport cl from './Login.module.css'\nimport { Field, reduxForm } from 'redux-form'\nimport { InputFormField } from '../../UI/FormFields/FormFields'\nimport { email, maxLength, minLength, required, requiredCheckbox } from '../../../util/formValidations'\nimport { connect } from 'react-redux'\nimport { login, selectAuth } from '../../../redux/reducers/authReducer'\nimport { Redirect } from 'react-router-dom'\nimport { compose } from 'redux'\nimport { withRouter } from 'react-router-dom'\nimport withRedirectToProfile from '../../../hoc/withRedirectToProfile'\nimport Preloader from '../../UI/Preloader/Preloader'\nimport { LOGIN_FORM } from '../../../util/formConstants'\nimport withGlobalError from '../../../hoc/withGlobalError'\n\nconst maxLength12 = maxLength(12);\nconst minLength3 = minLength(3);\n\nlet LoginForm = memo(({handleSubmit, pristine, invalid, error, isLogging, captchaUrl, isFetchingCaptchaUrl, ...props}) => {\n  let captcha = null;\n  if(captchaUrl) {\n    captcha = isFetchingCaptchaUrl ? <Preloader /> : (<div>\n      <div>\n        <img key={captchaUrl} src={captchaUrl} alt=\"captcha\" />\n      </div>\n      <Field name=\"captcha\" validate={[required]} component={InputFormField} />\n    </div>)\n  }\n  \n  return isLogging \n    ? <Preloader /> \n    : (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <Field name=\"email\" validate={[required, email]} type=\"email\" component={InputFormField} placeholder='Enter email...' />\n      </div>\n      <div>\n        <Field name=\"password\" validate={[required, minLength3, maxLength12]} type=\"password\" component={InputFormField} placeholder='Enter password...' />\n      </div>\n      <div>\n        <label htmlFor='rememberMe'>\n          Remember me\n        </label>\n        <Field name=\"rememberMe\" type=\"checkbox\" component={InputFormField} />\n      </div>\n      {captcha}\n      <button disabled={pristine || invalid}>Login</button>\n      {error && <div className='form-error'>\n        {error}\n      </div>}\n    </form>\n  )\n})\n\nLoginForm = reduxForm({\n  form: LOGIN_FORM,\n})(LoginForm)\n\nlet Login = ({login, isLogging, captchaUrl, isFetchingCaptchaUrl, ...props}) => {\n  const onSubmit = (formData) => {\n    login(formData)\n  }\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <LoginForm isFetchingCaptchaUrl={isFetchingCaptchaUrl} isLogging={isLogging} captchaUrl={captchaUrl} onSubmit={onSubmit} />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  isLogging: selectAuth(state).isLogging,\n  captchaUrl: selectAuth(state).captchaUrl,\n  isFetchingCaptchaUrl: selectAuth(state).isFetchingCaptchaUrl,\n})\n\nconst mapDispatchToProps = {\n  login\n}\n\nLogin = compose(\n  withRouter,\n  withRedirectToProfile,\n  withGlobalError,\n  connect(mapStateToProps, mapDispatchToProps)\n  )(Login)\n\nexport default Login"],"sourceRoot":""}